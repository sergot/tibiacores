// Code generated by MockGen. DO NOT EDIT.
// Source: services/email.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailServiceInterface is a mock of EmailServiceInterface interface.
type MockEmailServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceInterfaceMockRecorder
}

// MockEmailServiceInterfaceMockRecorder is the mock recorder for MockEmailServiceInterface.
type MockEmailServiceInterfaceMockRecorder struct {
	mock *MockEmailServiceInterface
}

// NewMockEmailServiceInterface creates a new mock instance.
func NewMockEmailServiceInterface(ctrl *gomock.Controller) *MockEmailServiceInterface {
	mock := &MockEmailServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEmailServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceInterface) EXPECT() *MockEmailServiceInterfaceMockRecorder {
	return m.recorder
}

// SendVerificationEmail mocks base method.
func (m *MockEmailServiceInterface) SendVerificationEmail(ctx context.Context, email, verificationToken, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", ctx, email, verificationToken, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockEmailServiceInterfaceMockRecorder) SendVerificationEmail(ctx, email, verificationToken, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockEmailServiceInterface)(nil).SendVerificationEmail), ctx, email, verificationToken, userID)
}
