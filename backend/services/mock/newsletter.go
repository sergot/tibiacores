// Code generated by MockGen. DO NOT EDIT.
// Source: services/newsletter.go
//
// Generated by this command:
//
//	mockgen -source=services/newsletter.go -destination=services/mock/newsletter.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNewsletterServiceInterface is a mock of NewsletterServiceInterface interface.
type MockNewsletterServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockNewsletterServiceInterfaceMockRecorder is the mock recorder for MockNewsletterServiceInterface.
type MockNewsletterServiceInterfaceMockRecorder struct {
	mock *MockNewsletterServiceInterface
}

// NewMockNewsletterServiceInterface creates a new mock instance.
func NewMockNewsletterServiceInterface(ctrl *gomock.Controller) *MockNewsletterServiceInterface {
	mock := &MockNewsletterServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNewsletterServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterServiceInterface) EXPECT() *MockNewsletterServiceInterfaceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockNewsletterServiceInterface) Subscribe(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNewsletterServiceInterfaceMockRecorder) Subscribe(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNewsletterServiceInterface)(nil).Subscribe), ctx, email)
}
