// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sergot/tibiacores/backend/services (interfaces: NewsletterServiceInterface)
//
// Generated by this command:
//
//	mockgen -package mock -destination services/mock/newsletter.go github.com/sergot/tibiacores/backend/services NewsletterServiceInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNewsletterServiceInterface is a mock of NewsletterServiceInterface interface.
type MockNewsletterServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockNewsletterServiceInterfaceMockRecorder is the mock recorder for MockNewsletterServiceInterface.
type MockNewsletterServiceInterfaceMockRecorder struct {
	mock *MockNewsletterServiceInterface
}

// NewMockNewsletterServiceInterface creates a new mock instance.
func NewMockNewsletterServiceInterface(ctrl *gomock.Controller) *MockNewsletterServiceInterface {
	mock := &MockNewsletterServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNewsletterServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterServiceInterface) EXPECT() *MockNewsletterServiceInterfaceMockRecorder {
	return m.recorder
}

// GetSubscriberStatus mocks base method.
func (m *MockNewsletterServiceInterface) GetSubscriberStatus(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriberStatus", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriberStatus indicates an expected call of GetSubscriberStatus.
func (mr *MockNewsletterServiceInterfaceMockRecorder) GetSubscriberStatus(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberStatus", reflect.TypeOf((*MockNewsletterServiceInterface)(nil).GetSubscriberStatus), ctx, email)
}

// SubscribeToNewsletter mocks base method.
func (m *MockNewsletterServiceInterface) SubscribeToNewsletter(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToNewsletter", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToNewsletter indicates an expected call of SubscribeToNewsletter.
func (mr *MockNewsletterServiceInterfaceMockRecorder) SubscribeToNewsletter(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToNewsletter", reflect.TypeOf((*MockNewsletterServiceInterface)(nil).SubscribeToNewsletter), ctx, email)
}

// UnsubscribeFromNewsletter mocks base method.
func (m *MockNewsletterServiceInterface) UnsubscribeFromNewsletter(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromNewsletter", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeFromNewsletter indicates an expected call of UnsubscribeFromNewsletter.
func (mr *MockNewsletterServiceInterfaceMockRecorder) UnsubscribeFromNewsletter(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromNewsletter", reflect.TypeOf((*MockNewsletterServiceInterface)(nil).UnsubscribeFromNewsletter), ctx, email)
}

// UnsubscribeFromNewsletterByID mocks base method.
func (m *MockNewsletterServiceInterface) UnsubscribeFromNewsletterByID(ctx context.Context, contactID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromNewsletterByID", ctx, contactID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeFromNewsletterByID indicates an expected call of UnsubscribeFromNewsletterByID.
func (mr *MockNewsletterServiceInterfaceMockRecorder) UnsubscribeFromNewsletterByID(ctx, contactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromNewsletterByID", reflect.TypeOf((*MockNewsletterServiceInterface)(nil).UnsubscribeFromNewsletterByID), ctx, contactID)
}
