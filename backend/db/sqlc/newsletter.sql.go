// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: newsletter.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const confirmNewsletterSubscription = `-- name: ConfirmNewsletterSubscription :one
UPDATE newsletter_subscribers
SET confirmed = true,
    confirmed_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE email = $1
RETURNING id, email, subscribed_at, confirmed, confirmed_at, unsubscribed_at, emailoctopus_contact_id, created_at, updated_at
`

func (q *Queries) ConfirmNewsletterSubscription(ctx context.Context, email string) (NewsletterSubscriber, error) {
	row := q.db.QueryRow(ctx, confirmNewsletterSubscription, email)
	var i NewsletterSubscriber
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.SubscribedAt,
		&i.Confirmed,
		&i.ConfirmedAt,
		&i.UnsubscribedAt,
		&i.EmailoctopusContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNewsletterSubscriber = `-- name: CreateNewsletterSubscriber :one
INSERT INTO newsletter_subscribers (
    email,
    emailoctopus_contact_id
) VALUES (
    $1, $2
) RETURNING id, email, subscribed_at, confirmed, confirmed_at, unsubscribed_at, emailoctopus_contact_id, created_at, updated_at
`

type CreateNewsletterSubscriberParams struct {
	Email                 string      `json:"email"`
	EmailoctopusContactID pgtype.Text `json:"emailoctopus_contact_id"`
}

func (q *Queries) CreateNewsletterSubscriber(ctx context.Context, arg CreateNewsletterSubscriberParams) (NewsletterSubscriber, error) {
	row := q.db.QueryRow(ctx, createNewsletterSubscriber, arg.Email, arg.EmailoctopusContactID)
	var i NewsletterSubscriber
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.SubscribedAt,
		&i.Confirmed,
		&i.ConfirmedAt,
		&i.UnsubscribedAt,
		&i.EmailoctopusContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveNewsletterSubscribers = `-- name: GetActiveNewsletterSubscribers :many
SELECT id, email, subscribed_at, confirmed, confirmed_at, unsubscribed_at, emailoctopus_contact_id, created_at, updated_at FROM newsletter_subscribers
WHERE confirmed = true
AND unsubscribed_at IS NULL
ORDER BY subscribed_at DESC
`

func (q *Queries) GetActiveNewsletterSubscribers(ctx context.Context) ([]NewsletterSubscriber, error) {
	rows, err := q.db.Query(ctx, getActiveNewsletterSubscribers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NewsletterSubscriber{}
	for rows.Next() {
		var i NewsletterSubscriber
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.SubscribedAt,
			&i.Confirmed,
			&i.ConfirmedAt,
			&i.UnsubscribedAt,
			&i.EmailoctopusContactID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewsletterSubscriberByEmail = `-- name: GetNewsletterSubscriberByEmail :one
SELECT id, email, subscribed_at, confirmed, confirmed_at, unsubscribed_at, emailoctopus_contact_id, created_at, updated_at FROM newsletter_subscribers
WHERE email = $1
`

func (q *Queries) GetNewsletterSubscriberByEmail(ctx context.Context, email string) (NewsletterSubscriber, error) {
	row := q.db.QueryRow(ctx, getNewsletterSubscriberByEmail, email)
	var i NewsletterSubscriber
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.SubscribedAt,
		&i.Confirmed,
		&i.ConfirmedAt,
		&i.UnsubscribedAt,
		&i.EmailoctopusContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNewsletterSubscriberStats = `-- name: GetNewsletterSubscriberStats :one
SELECT 
    COUNT(*) as total_subscribers,
    COUNT(*) FILTER (WHERE confirmed = true AND unsubscribed_at IS NULL) as active_subscribers,
    COUNT(*) FILTER (WHERE confirmed = false) as pending_confirmation,
    COUNT(*) FILTER (WHERE unsubscribed_at IS NOT NULL) as unsubscribed
FROM newsletter_subscribers
`

type GetNewsletterSubscriberStatsRow struct {
	TotalSubscribers    int64 `json:"total_subscribers"`
	ActiveSubscribers   int64 `json:"active_subscribers"`
	PendingConfirmation int64 `json:"pending_confirmation"`
	Unsubscribed        int64 `json:"unsubscribed"`
}

func (q *Queries) GetNewsletterSubscriberStats(ctx context.Context) (GetNewsletterSubscriberStatsRow, error) {
	row := q.db.QueryRow(ctx, getNewsletterSubscriberStats)
	var i GetNewsletterSubscriberStatsRow
	err := row.Scan(
		&i.TotalSubscribers,
		&i.ActiveSubscribers,
		&i.PendingConfirmation,
		&i.Unsubscribed,
	)
	return i, err
}

const unsubscribeFromNewsletter = `-- name: UnsubscribeFromNewsletter :one
UPDATE newsletter_subscribers
SET unsubscribed_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE email = $1
RETURNING id, email, subscribed_at, confirmed, confirmed_at, unsubscribed_at, emailoctopus_contact_id, created_at, updated_at
`

func (q *Queries) UnsubscribeFromNewsletter(ctx context.Context, email string) (NewsletterSubscriber, error) {
	row := q.db.QueryRow(ctx, unsubscribeFromNewsletter, email)
	var i NewsletterSubscriber
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.SubscribedAt,
		&i.Confirmed,
		&i.ConfirmedAt,
		&i.UnsubscribedAt,
		&i.EmailoctopusContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
