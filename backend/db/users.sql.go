// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAnonymousUser = `-- name: CreateAnonymousUser :one
INSERT INTO users (id, is_anonymous)
VALUES ($1, TRUE)
RETURNING id, is_anonymous, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

func (q *Queries) CreateAnonymousUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, createAnonymousUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, email_verification_token, email_verification_expires_at, is_anonymous, email_verified)
VALUES ($1, $2, $3, $4, FALSE, $5)
RETURNING id, is_anonymous, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	Email                      pgtype.Text        `json:"email"`
	Password                   pgtype.Text        `json:"password"`
	EmailVerificationToken     uuid.UUID          `json:"email_verification_token"`
	EmailVerificationExpiresAt pgtype.Timestamptz `json:"email_verification_expires_at"`
	EmailVerified              bool               `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.EmailVerificationToken,
		arg.EmailVerificationExpiresAt,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, is_anonymous, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, is_anonymous, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserLists = `-- name: GetUserLists :many
WITH user_lists AS (
    -- Get lists where user is the author
    SELECT l.id, l.author_id, l.name, l.share_code, l.world, l.created_at, l.updated_at, lu.character_id, TRUE as is_author
    FROM lists l
    LEFT JOIN lists_users lu ON l.id = lu.list_id AND lu.user_id = l.author_id
    WHERE l.author_id = $1
    
    UNION ALL
    
    -- Get lists where user is a member
    SELECT l.id, l.author_id, l.name, l.share_code, l.world, l.created_at, l.updated_at, lu.character_id, FALSE as is_author
    FROM lists l
    JOIN lists_users lu ON l.id = lu.list_id
    WHERE lu.user_id = $1 AND l.author_id != $1
)
SELECT DISTINCT
    ul.id,
    ul.author_id,
    ul.name,
    ul.share_code,
    ul.world,
    ul.created_at,
    ul.updated_at,
    ul.is_author,
    c.name as character_name
FROM user_lists ul
LEFT JOIN characters c ON ul.character_id = c.id
ORDER BY ul.created_at DESC
`

type GetUserListsRow struct {
	ID            uuid.UUID          `json:"id"`
	AuthorID      uuid.UUID          `json:"author_id"`
	Name          string             `json:"name"`
	ShareCode     uuid.UUID          `json:"share_code"`
	World         string             `json:"world"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	IsAuthor      bool               `json:"is_author"`
	CharacterName pgtype.Text        `json:"character_name"`
}

func (q *Queries) GetUserLists(ctx context.Context, authorID uuid.UUID) ([]GetUserListsRow, error) {
	rows, err := q.db.Query(ctx, getUserLists, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserListsRow{}
	for rows.Next() {
		var i GetUserListsRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Name,
			&i.ShareCode,
			&i.World,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAuthor,
			&i.CharacterName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const migrateAnonymousUser = `-- name: MigrateAnonymousUser :one
UPDATE users
SET email = $1,
    password = $2,
    email_verification_token = $3,
    email_verification_expires_at = $4,
    is_anonymous = false
WHERE id = $5 AND is_anonymous = true
RETURNING id, is_anonymous, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type MigrateAnonymousUserParams struct {
	Email                      pgtype.Text        `json:"email"`
	Password                   pgtype.Text        `json:"password"`
	EmailVerificationToken     uuid.UUID          `json:"email_verification_token"`
	EmailVerificationExpiresAt pgtype.Timestamptz `json:"email_verification_expires_at"`
	ID                         uuid.UUID          `json:"id"`
}

func (q *Queries) MigrateAnonymousUser(ctx context.Context, arg MigrateAnonymousUserParams) (User, error) {
	row := q.db.QueryRow(ctx, migrateAnonymousUser,
		arg.Email,
		arg.Password,
		arg.EmailVerificationToken,
		arg.EmailVerificationExpiresAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE users
SET email_verified = true,
    email_verification_token = NULL,
    email_verification_expires_at = NULL
WHERE id = $1 AND email_verification_token = $2
`

type VerifyEmailParams struct {
	ID                     uuid.UUID `json:"id"`
	EmailVerificationToken uuid.UUID `json:"email_verification_token"`
}

func (q *Queries) VerifyEmail(ctx context.Context, arg VerifyEmailParams) error {
	_, err := q.db.Exec(ctx, verifyEmail, arg.ID, arg.EmailVerificationToken)
	return err
}
