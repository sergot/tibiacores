// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type SoulcoreStatus string

const (
	SoulcoreStatusObtained SoulcoreStatus = "obtained"
	SoulcoreStatusUnlocked SoulcoreStatus = "unlocked"
)

func (e *SoulcoreStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SoulcoreStatus(s)
	case string:
		*e = SoulcoreStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SoulcoreStatus: %T", src)
	}
	return nil
}

type NullSoulcoreStatus struct {
	SoulcoreStatus SoulcoreStatus `json:"soulcore_status"`
	Valid          bool           `json:"valid"` // Valid is true if SoulcoreStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSoulcoreStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SoulcoreStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SoulcoreStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSoulcoreStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SoulcoreStatus), nil
}

type Character struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	Name      string             `json:"name"`
	World     string             `json:"world"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type CharacterClaim struct {
	ID               uuid.UUID          `json:"id"`
	CharacterID      uuid.UUID          `json:"character_id"`
	ClaimerID        uuid.UUID          `json:"claimer_id"`
	VerificationCode string             `json:"verification_code"`
	Status           string             `json:"status"`
	LastCheckedAt    pgtype.Timestamptz `json:"last_checked_at"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type CharactersSoulcore struct {
	CharacterID uuid.UUID `json:"character_id"`
	CreatureID  uuid.UUID `json:"creature_id"`
}

type Creature struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

type List struct {
	ID        uuid.UUID          `json:"id"`
	AuthorID  uuid.UUID          `json:"author_id"`
	Name      string             `json:"name"`
	ShareCode uuid.UUID          `json:"share_code"`
	World     string             `json:"world"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type ListsSoulcore struct {
	ListID        uuid.UUID      `json:"list_id"`
	CreatureID    uuid.UUID      `json:"creature_id"`
	AddedByUserID uuid.UUID      `json:"added_by_user_id"`
	Status        SoulcoreStatus `json:"status"`
}

type ListsUser struct {
	ListID      uuid.UUID `json:"list_id"`
	UserID      uuid.UUID `json:"user_id"`
	CharacterID uuid.UUID `json:"character_id"`
	Active      bool      `json:"active"`
}

type User struct {
	ID                         uuid.UUID          `json:"id"`
	IsAnonymous                bool               `json:"is_anonymous"`
	Email                      pgtype.Text        `json:"email"`
	Password                   pgtype.Text        `json:"password"`
	EmailVerified              bool               `json:"email_verified"`
	EmailVerificationToken     uuid.UUID          `json:"email_verification_token"`
	EmailVerificationExpiresAt pgtype.Timestamptz `json:"email_verification_expires_at"`
	CreatedAt                  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                  pgtype.Timestamptz `json:"updated_at"`
}
