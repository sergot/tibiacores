// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sergot/tibiacores/backend/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mock -destination db/mock/store.go github.com/sergot/tibiacores/backend/db/sqlc Store
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/sergot/tibiacores/backend/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddCharacterSoulcore mocks base method.
func (m *MockStore) AddCharacterSoulcore(ctx context.Context, arg db.AddCharacterSoulcoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCharacterSoulcore", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCharacterSoulcore indicates an expected call of AddCharacterSoulcore.
func (mr *MockStoreMockRecorder) AddCharacterSoulcore(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCharacterSoulcore", reflect.TypeOf((*MockStore)(nil).AddCharacterSoulcore), ctx, arg)
}

// AddListCharacter mocks base method.
func (m *MockStore) AddListCharacter(ctx context.Context, arg db.AddListCharacterParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddListCharacter", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddListCharacter indicates an expected call of AddListCharacter.
func (mr *MockStoreMockRecorder) AddListCharacter(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListCharacter", reflect.TypeOf((*MockStore)(nil).AddListCharacter), ctx, arg)
}

// AddSoulcoreToList mocks base method.
func (m *MockStore) AddSoulcoreToList(ctx context.Context, arg db.AddSoulcoreToListParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSoulcoreToList", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSoulcoreToList indicates an expected call of AddSoulcoreToList.
func (mr *MockStoreMockRecorder) AddSoulcoreToList(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSoulcoreToList", reflect.TypeOf((*MockStore)(nil).AddSoulcoreToList), ctx, arg)
}

// CreateAnonymousUser mocks base method.
func (m *MockStore) CreateAnonymousUser(ctx context.Context, id uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnonymousUser", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnonymousUser indicates an expected call of CreateAnonymousUser.
func (mr *MockStoreMockRecorder) CreateAnonymousUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnonymousUser", reflect.TypeOf((*MockStore)(nil).CreateAnonymousUser), ctx, id)
}

// CreateCharacter mocks base method.
func (m *MockStore) CreateCharacter(ctx context.Context, arg db.CreateCharacterParams) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", ctx, arg)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockStoreMockRecorder) CreateCharacter(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockStore)(nil).CreateCharacter), ctx, arg)
}

// CreateCharacterClaim mocks base method.
func (m *MockStore) CreateCharacterClaim(ctx context.Context, arg db.CreateCharacterClaimParams) (db.CharacterClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacterClaim", ctx, arg)
	ret0, _ := ret[0].(db.CharacterClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacterClaim indicates an expected call of CreateCharacterClaim.
func (mr *MockStoreMockRecorder) CreateCharacterClaim(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacterClaim", reflect.TypeOf((*MockStore)(nil).CreateCharacterClaim), ctx, arg)
}

// CreateList mocks base method.
func (m *MockStore) CreateList(ctx context.Context, arg db.CreateListParams) (db.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, arg)
	ret0, _ := ret[0].(db.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockStoreMockRecorder) CreateList(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockStore)(nil).CreateList), ctx, arg)
}

// CreateSoulcoreSuggestion mocks base method.
func (m *MockStore) CreateSoulcoreSuggestion(ctx context.Context, arg db.CreateSoulcoreSuggestionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSoulcoreSuggestion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSoulcoreSuggestion indicates an expected call of CreateSoulcoreSuggestion.
func (mr *MockStoreMockRecorder) CreateSoulcoreSuggestion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSoulcoreSuggestion", reflect.TypeOf((*MockStore)(nil).CreateSoulcoreSuggestion), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DeactivateCharacterListMemberships mocks base method.
func (m *MockStore) DeactivateCharacterListMemberships(ctx context.Context, characterID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateCharacterListMemberships", ctx, characterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateCharacterListMemberships indicates an expected call of DeactivateCharacterListMemberships.
func (mr *MockStoreMockRecorder) DeactivateCharacterListMemberships(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateCharacterListMemberships", reflect.TypeOf((*MockStore)(nil).DeactivateCharacterListMemberships), ctx, characterID)
}

// DeleteSoulcoreSuggestion mocks base method.
func (m *MockStore) DeleteSoulcoreSuggestion(ctx context.Context, arg db.DeleteSoulcoreSuggestionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSoulcoreSuggestion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSoulcoreSuggestion indicates an expected call of DeleteSoulcoreSuggestion.
func (mr *MockStoreMockRecorder) DeleteSoulcoreSuggestion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSoulcoreSuggestion", reflect.TypeOf((*MockStore)(nil).DeleteSoulcoreSuggestion), ctx, arg)
}

// GetCharacter mocks base method.
func (m *MockStore) GetCharacter(ctx context.Context, id uuid.UUID) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, id)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockStoreMockRecorder) GetCharacter(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockStore)(nil).GetCharacter), ctx, id)
}

// GetCharacterByName mocks base method.
func (m *MockStore) GetCharacterByName(ctx context.Context, name string) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterByName", ctx, name)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterByName indicates an expected call of GetCharacterByName.
func (mr *MockStoreMockRecorder) GetCharacterByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterByName", reflect.TypeOf((*MockStore)(nil).GetCharacterByName), ctx, name)
}

// GetCharacterClaim mocks base method.
func (m *MockStore) GetCharacterClaim(ctx context.Context, arg db.GetCharacterClaimParams) (db.CharacterClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterClaim", ctx, arg)
	ret0, _ := ret[0].(db.CharacterClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterClaim indicates an expected call of GetCharacterClaim.
func (mr *MockStoreMockRecorder) GetCharacterClaim(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterClaim", reflect.TypeOf((*MockStore)(nil).GetCharacterClaim), ctx, arg)
}

// GetCharacterSoulcores mocks base method.
func (m *MockStore) GetCharacterSoulcores(ctx context.Context, characterID uuid.UUID) ([]db.GetCharacterSoulcoresRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterSoulcores", ctx, characterID)
	ret0, _ := ret[0].([]db.GetCharacterSoulcoresRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterSoulcores indicates an expected call of GetCharacterSoulcores.
func (mr *MockStoreMockRecorder) GetCharacterSoulcores(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterSoulcores", reflect.TypeOf((*MockStore)(nil).GetCharacterSoulcores), ctx, characterID)
}

// GetCharacterSuggestions mocks base method.
func (m *MockStore) GetCharacterSuggestions(ctx context.Context, characterID uuid.UUID) ([]db.GetCharacterSuggestionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterSuggestions", ctx, characterID)
	ret0, _ := ret[0].([]db.GetCharacterSuggestionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterSuggestions indicates an expected call of GetCharacterSuggestions.
func (mr *MockStoreMockRecorder) GetCharacterSuggestions(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterSuggestions", reflect.TypeOf((*MockStore)(nil).GetCharacterSuggestions), ctx, characterID)
}

// GetCharactersByUserID mocks base method.
func (m *MockStore) GetCharactersByUserID(ctx context.Context, userID uuid.UUID) ([]db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharactersByUserID", ctx, userID)
	ret0, _ := ret[0].([]db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharactersByUserID indicates an expected call of GetCharactersByUserID.
func (mr *MockStoreMockRecorder) GetCharactersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharactersByUserID", reflect.TypeOf((*MockStore)(nil).GetCharactersByUserID), ctx, userID)
}

// GetClaimByID mocks base method.
func (m *MockStore) GetClaimByID(ctx context.Context, id uuid.UUID) (db.GetClaimByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimByID", ctx, id)
	ret0, _ := ret[0].(db.GetClaimByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimByID indicates an expected call of GetClaimByID.
func (mr *MockStoreMockRecorder) GetClaimByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimByID", reflect.TypeOf((*MockStore)(nil).GetClaimByID), ctx, id)
}

// GetCreatures mocks base method.
func (m *MockStore) GetCreatures(ctx context.Context) ([]db.Creature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatures", ctx)
	ret0, _ := ret[0].([]db.Creature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatures indicates an expected call of GetCreatures.
func (mr *MockStoreMockRecorder) GetCreatures(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatures", reflect.TypeOf((*MockStore)(nil).GetCreatures), ctx)
}

// GetList mocks base method.
func (m *MockStore) GetList(ctx context.Context, id uuid.UUID) (db.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, id)
	ret0, _ := ret[0].(db.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockStoreMockRecorder) GetList(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockStore)(nil).GetList), ctx, id)
}

// GetListByShareCode mocks base method.
func (m *MockStore) GetListByShareCode(ctx context.Context, shareCode uuid.UUID) (db.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByShareCode", ctx, shareCode)
	ret0, _ := ret[0].(db.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByShareCode indicates an expected call of GetListByShareCode.
func (mr *MockStoreMockRecorder) GetListByShareCode(ctx, shareCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByShareCode", reflect.TypeOf((*MockStore)(nil).GetListByShareCode), ctx, shareCode)
}

// GetListMembers mocks base method.
func (m *MockStore) GetListMembers(ctx context.Context, listID uuid.UUID) ([]db.GetListMembersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMembers", ctx, listID)
	ret0, _ := ret[0].([]db.GetListMembersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMembers indicates an expected call of GetListMembers.
func (mr *MockStoreMockRecorder) GetListMembers(ctx, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMembers", reflect.TypeOf((*MockStore)(nil).GetListMembers), ctx, listID)
}

// GetListMembersWithUnlocks mocks base method.
func (m *MockStore) GetListMembersWithUnlocks(ctx context.Context, listID uuid.UUID) ([]db.GetListMembersWithUnlocksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMembersWithUnlocks", ctx, listID)
	ret0, _ := ret[0].([]db.GetListMembersWithUnlocksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMembersWithUnlocks indicates an expected call of GetListMembersWithUnlocks.
func (mr *MockStoreMockRecorder) GetListMembersWithUnlocks(ctx, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMembersWithUnlocks", reflect.TypeOf((*MockStore)(nil).GetListMembersWithUnlocks), ctx, listID)
}

// GetListSoulcore mocks base method.
func (m *MockStore) GetListSoulcore(ctx context.Context, arg db.GetListSoulcoreParams) (db.GetListSoulcoreRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSoulcore", ctx, arg)
	ret0, _ := ret[0].(db.GetListSoulcoreRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSoulcore indicates an expected call of GetListSoulcore.
func (mr *MockStoreMockRecorder) GetListSoulcore(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSoulcore", reflect.TypeOf((*MockStore)(nil).GetListSoulcore), ctx, arg)
}

// GetListSoulcores mocks base method.
func (m *MockStore) GetListSoulcores(ctx context.Context, listID uuid.UUID) ([]db.GetListSoulcoresRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSoulcores", ctx, listID)
	ret0, _ := ret[0].([]db.GetListSoulcoresRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSoulcores indicates an expected call of GetListSoulcores.
func (mr *MockStoreMockRecorder) GetListSoulcores(ctx, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSoulcores", reflect.TypeOf((*MockStore)(nil).GetListSoulcores), ctx, listID)
}

// GetListsByAuthorId mocks base method.
func (m *MockStore) GetListsByAuthorId(ctx context.Context, authorID uuid.UUID) ([]db.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListsByAuthorId", ctx, authorID)
	ret0, _ := ret[0].([]db.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListsByAuthorId indicates an expected call of GetListsByAuthorId.
func (mr *MockStoreMockRecorder) GetListsByAuthorId(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListsByAuthorId", reflect.TypeOf((*MockStore)(nil).GetListsByAuthorId), ctx, authorID)
}

// GetMembers mocks base method.
func (m *MockStore) GetMembers(ctx context.Context, listID uuid.UUID) ([]db.ListsUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx, listID)
	ret0, _ := ret[0].([]db.ListsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockStoreMockRecorder) GetMembers(ctx, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockStore)(nil).GetMembers), ctx, listID)
}

// GetPendingClaimsToCheck mocks base method.
func (m *MockStore) GetPendingClaimsToCheck(ctx context.Context) ([]db.GetPendingClaimsToCheckRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingClaimsToCheck", ctx)
	ret0, _ := ret[0].([]db.GetPendingClaimsToCheckRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingClaimsToCheck indicates an expected call of GetPendingClaimsToCheck.
func (mr *MockStoreMockRecorder) GetPendingClaimsToCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingClaimsToCheck", reflect.TypeOf((*MockStore)(nil).GetPendingClaimsToCheck), ctx)
}

// GetPendingSuggestionsForUser mocks base method.
func (m *MockStore) GetPendingSuggestionsForUser(ctx context.Context, userID uuid.UUID) ([]db.GetPendingSuggestionsForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingSuggestionsForUser", ctx, userID)
	ret0, _ := ret[0].([]db.GetPendingSuggestionsForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingSuggestionsForUser indicates an expected call of GetPendingSuggestionsForUser.
func (mr *MockStoreMockRecorder) GetPendingSuggestionsForUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingSuggestionsForUser", reflect.TypeOf((*MockStore)(nil).GetPendingSuggestionsForUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email pgtype.Text) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(ctx context.Context, id uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), ctx, id)
}

// GetUserCharacters mocks base method.
func (m *MockStore) GetUserCharacters(ctx context.Context, userID uuid.UUID) ([]db.GetUserCharactersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCharacters", ctx, userID)
	ret0, _ := ret[0].([]db.GetUserCharactersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCharacters indicates an expected call of GetUserCharacters.
func (mr *MockStoreMockRecorder) GetUserCharacters(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCharacters", reflect.TypeOf((*MockStore)(nil).GetUserCharacters), ctx, userID)
}

// GetUserLists mocks base method.
func (m *MockStore) GetUserLists(ctx context.Context, authorID uuid.UUID) ([]db.GetUserListsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLists", ctx, authorID)
	ret0, _ := ret[0].([]db.GetUserListsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLists indicates an expected call of GetUserLists.
func (mr *MockStoreMockRecorder) GetUserLists(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLists", reflect.TypeOf((*MockStore)(nil).GetUserLists), ctx, authorID)
}

// IsUserListMember mocks base method.
func (m *MockStore) IsUserListMember(ctx context.Context, arg db.IsUserListMemberParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserListMember", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserListMember indicates an expected call of IsUserListMember.
func (mr *MockStoreMockRecorder) IsUserListMember(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserListMember", reflect.TypeOf((*MockStore)(nil).IsUserListMember), ctx, arg)
}

// MigrateAnonymousUser mocks base method.
func (m *MockStore) MigrateAnonymousUser(ctx context.Context, arg db.MigrateAnonymousUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateAnonymousUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateAnonymousUser indicates an expected call of MigrateAnonymousUser.
func (mr *MockStoreMockRecorder) MigrateAnonymousUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateAnonymousUser", reflect.TypeOf((*MockStore)(nil).MigrateAnonymousUser), ctx, arg)
}

// RemoveCharacterSoulcore mocks base method.
func (m *MockStore) RemoveCharacterSoulcore(ctx context.Context, arg db.RemoveCharacterSoulcoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCharacterSoulcore", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCharacterSoulcore indicates an expected call of RemoveCharacterSoulcore.
func (mr *MockStoreMockRecorder) RemoveCharacterSoulcore(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCharacterSoulcore", reflect.TypeOf((*MockStore)(nil).RemoveCharacterSoulcore), ctx, arg)
}

// RemoveListSoulcore mocks base method.
func (m *MockStore) RemoveListSoulcore(ctx context.Context, arg db.RemoveListSoulcoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveListSoulcore", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveListSoulcore indicates an expected call of RemoveListSoulcore.
func (mr *MockStoreMockRecorder) RemoveListSoulcore(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListSoulcore", reflect.TypeOf((*MockStore)(nil).RemoveListSoulcore), ctx, arg)
}

// UpdateCharacterOwner mocks base method.
func (m *MockStore) UpdateCharacterOwner(ctx context.Context, arg db.UpdateCharacterOwnerParams) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharacterOwner", ctx, arg)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCharacterOwner indicates an expected call of UpdateCharacterOwner.
func (mr *MockStoreMockRecorder) UpdateCharacterOwner(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacterOwner", reflect.TypeOf((*MockStore)(nil).UpdateCharacterOwner), ctx, arg)
}

// UpdateClaimStatus mocks base method.
func (m *MockStore) UpdateClaimStatus(ctx context.Context, arg db.UpdateClaimStatusParams) (db.CharacterClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClaimStatus", ctx, arg)
	ret0, _ := ret[0].(db.CharacterClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClaimStatus indicates an expected call of UpdateClaimStatus.
func (mr *MockStoreMockRecorder) UpdateClaimStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClaimStatus", reflect.TypeOf((*MockStore)(nil).UpdateClaimStatus), ctx, arg)
}

// UpdateSoulcoreStatus mocks base method.
func (m *MockStore) UpdateSoulcoreStatus(ctx context.Context, arg db.UpdateSoulcoreStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSoulcoreStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSoulcoreStatus indicates an expected call of UpdateSoulcoreStatus.
func (mr *MockStoreMockRecorder) UpdateSoulcoreStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoulcoreStatus", reflect.TypeOf((*MockStore)(nil).UpdateSoulcoreStatus), ctx, arg)
}

// VerifyEmail mocks base method.
func (m *MockStore) VerifyEmail(ctx context.Context, arg db.VerifyEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockStoreMockRecorder) VerifyEmail(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockStore)(nil).VerifyEmail), ctx, arg)
}
